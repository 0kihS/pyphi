#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np

from cyphi.network import Network
from cyphi.subsystem import Subsystem


# TODO pass just the subsystem (contains a reference to the network)

use_connectivity_matrices = True


def standard():
    """Matlab default network.

    Diagram:

    |           +~~~~~~+
    |    +~~~~~>|   A  |<~~~~+
    |    |      | (OR) +~~~+ |
    |    |      +~~~~~~+   | |
    |    |                 | |
    |    |                 v |
    |  +~+~~~~~~+      +~~~~~+~+
    |  |   B    |<~~~~~+   C   |
    |  | (COPY) +~~~~~>| (XOR) |
    |  +~~~~~~~~+      +~~~~~~~+

    TPM:

    +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
    | Past state ~~> Current state |
    |~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~|
    |   A, B, C    |    A, B, C    |
    |~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~|
    |  {0, 0, 0}   |   {0, 0, 0}   |
    |  {0, 0, 1}   |   {1, 1, 0}   |
    |  {0, 1, 0}   |   {1, 0, 1}   |
    |  {0, 1, 1}   |   {1, 1, 1}   |
    |  {1, 0, 0}   |   {0, 0, 1}   |
    |  {1, 0, 1}   |   {1, 1, 1}   |
    |  {1, 1, 0}   |   {1, 0, 0}   |
    |  {1, 1, 1}   |   {1, 1, 0}   |
    +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

    Connectivity matrix:

    (CM_ij = 1 means that node i is connected to node j)

    |       A  B  C
    |     +~~~~~~~~~+
    |   A | 0, 0, 1 |
    |   B | 1, 0, 1 |
    |   C | 1, 1, 0 |
    |     +~~~~~~~~~+

    """
    # TODO? make these into dictionaries/named tuples
    current_state = (1, 0, 0)
    past_state = (1, 1, 0)
    tpm = np.array([[0, 0, 0],
                    [0, 0, 1],
                    [1, 0, 1],
                    [1, 0, 0],
                    [1, 1, 0],
                    [1, 1, 1],
                    [1, 1, 1],
                    [1, 1, 0]])

    cm = np.array([[0, 0, 1],
                   [1, 0, 1],
                   [1, 1, 0]])

    cm = cm if use_connectivity_matrices else None
    return Network(tpm, current_state, past_state, connectivity_matrix=cm)


def s_empty():
    m = standard()
    return Subsystem((), m)


def s_single():
    m = standard()
    return Subsystem([0], m)


def subsys_n0n2():
    m = standard()
    return Subsystem((0, 2), m)


def subsys_n1n2():
    m = standard()
    return Subsystem((1, 2), m)


def s():
    m = standard()
    return Subsystem(range(m.size), m)


def simple(current_state, past_state):
    """ Simple 'AND' network.

    Diagram:

    |           +~~~~~~~+
    |    +~~~~~~+   A   |<~~~~+
    |    | +~~~>| (AND) +~~~+ |
    |    | |    +~~~~~~~+   | |
    |    | |                | |
    |    v |                v |
    |  +~+~+~~~~+      +~~~~~~+~+
    |  |   B    |<~~~~~+    C   |
    |  | (OFF)  +~~~~~>|  (OFF) |
    |  +~~~~~~~~+      +~~~~~~~~+

    TPM:

    +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
    |  Past state ~~> Current state |
    |~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~|
    |   A, B, C    |    A, B, C     |
    |~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~|
    |  {0, 0, 0}   |   {0, 0, 0}    |
    |  {0, 0, 1}   |   {0, 0, 0}    |
    |  {0, 1, 0}   |   {0, 0, 0}    |
    |  {0, 1, 1}   |   {1, 0, 0}    |
    |  {1, 0, 0}   |   {0, 0, 0}    |
    |  {1, 0, 1}   |   {0, 0, 0}    |
    |  {1, 1, 0}   |   {0, 0, 0}    |
    |  {1, 1, 1}   |   {0, 0, 0}    |
    +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
    """
    tpm = np.array([[0, 0, 0],
                    [0, 0, 0],
                    [0, 0, 0],
                    [0, 0, 0],
                    [0, 0, 0],
                    [0, 0, 0],
                    [1, 0, 0],
                    [0, 0, 0]])
    return Network(tpm, current_state, past_state)


def s_subsys_all_off():
    s = simple((0, 0, 0), (0, 0, 0))
    return Subsystem(range(s.size), s)


def s_subsys_all_a_just_on():
    a_about_to_be_on = (0, 1, 1)
    a_just_turned_on = (1, 0, 0)
    s = simple(a_just_turned_on, a_about_to_be_on)
    return Subsystem(range(s.size), s)


def big():
    """Return a large network."""
    tpm = np.array([[0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 1, 1, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 1],
                    [0, 0, 1, 1, 1],
                    [0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 1],
                    [0, 1, 1, 1, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 0, 1, 1],
                    [1, 0, 0, 1, 1],
                    [1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0],
                    [0, 1, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0],
                    [1, 0, 1, 1, 1],
                    [1, 1, 1, 1, 1],
                    [1, 1, 0, 0, 0],
                    [1, 1, 1, 0, 0],
                    [1, 1, 1, 0, 1],
                    [1, 1, 1, 1, 1],
                    [1, 1, 0, 0, 1],
                    [1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1]])
    # All on
    current_state = (1,) * 5
    # All on
    past_state = (1,) * 5
    return Network(tpm, current_state, past_state)


def big_subsys_all():
    """Return the subsystem associated with ``big``."""
    b = big()
    return Subsystem(range(b.size), b)


def reducible():
    tpm = np.zeros([2] * 2 + [2])
    current_state = (0, 0)
    past_state = (0, 0)
    cm = np.array([[1, 0],
                   [0, 1]])
    cm = cm if use_connectivity_matrices else None
    r = Network(tpm, current_state, past_state, connectivity_matrix=cm)
    # Return the full subsystem
    return Subsystem(range(r.size), r)


def rule30():
    tpm = np.array([[0, 0, 0, 0, 0],
                    [1, 1, 0, 0, 1],
                    [1, 1, 1, 0, 0],
                    [1, 0, 1, 0, 1],
                    [0, 1, 1, 1, 0],
                    [1, 0, 1, 1, 1],
                    [1, 1, 0, 1, 0],
                    [1, 0, 0, 1, 1],
                    [0, 0, 1, 1, 1],
                    [1, 1, 1, 1, 0],
                    [1, 1, 0, 1, 1],
                    [1, 0, 0, 1, 0],
                    [0, 1, 1, 0, 1],
                    [1, 0, 1, 0, 0],
                    [1, 1, 0, 0, 1],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 1, 1],
                    [0, 1, 0, 1, 1],
                    [0, 1, 1, 1, 1],
                    [0, 0, 1, 1, 1],
                    [1, 1, 1, 0, 1],
                    [0, 0, 1, 0, 1],
                    [0, 1, 0, 0, 1],
                    [0, 0, 0, 0, 1],
                    [1, 0, 1, 1, 0],
                    [0, 1, 1, 1, 0],
                    [0, 1, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [1, 1, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0]])

    cm = np.array([[1, 1, 0, 0, 1],
                   [1, 1, 1, 0, 0],
                   [0, 1, 1, 1, 0],
                   [0, 0, 1, 1, 1],
                   [1, 0, 0, 1, 1]])

    all_off = (0, 0, 0, 0, 0)

    rule30 = Network(tpm, all_off, all_off, connectivity_matrix=cm)

    return Subsystem(range(rule30.size), rule30)


def trivial():
    """Single-node network with a self-loop."""

    trivial = Network(np.array([[1], [1]]), (1, ), (1, ),
                      connectivity_matrix=np.array([[1]]))

    return Subsystem(range(trivial.size), trivial)


def eight_node():
    """Eight-node network."""

    tpm = np.array(
        [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 1],
         [1, 0, 0, 0, 0, 0, 0, 0],
         [1, 1, 0, 0, 0, 0, 0, 1],
         [0, 1, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 1],
         [1, 1, 1, 0, 0, 0, 0, 0],
         [1, 0, 1, 0, 0, 0, 0, 1],
         [0, 0, 1, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 1],
         [1, 0, 1, 0, 0, 0, 0, 0],
         [1, 1, 1, 0, 0, 0, 0, 1],
         [0, 1, 1, 1, 0, 0, 0, 0],
         [0, 1, 1, 1, 0, 0, 0, 1],
         [1, 1, 0, 1, 0, 0, 0, 0],
         [1, 0, 0, 1, 0, 0, 0, 1],
         [0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 1],
         [1, 0, 0, 1, 0, 0, 0, 0],
         [1, 1, 0, 1, 0, 0, 0, 1],
         [0, 1, 0, 1, 0, 0, 0, 0],
         [0, 1, 0, 1, 0, 0, 0, 1],
         [1, 1, 1, 1, 0, 0, 0, 0],
         [1, 0, 1, 1, 0, 0, 0, 1],
         [0, 0, 1, 1, 1, 0, 0, 0],
         [0, 0, 1, 1, 1, 0, 0, 1],
         [1, 0, 1, 1, 1, 0, 0, 0],
         [1, 1, 1, 1, 1, 0, 0, 1],
         [0, 1, 1, 0, 1, 0, 0, 0],
         [0, 1, 1, 0, 1, 0, 0, 1],
         [1, 1, 0, 0, 1, 0, 0, 0],
         [1, 0, 0, 0, 1, 0, 0, 1],
         [0, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 1, 0, 0, 1],
         [1, 0, 0, 0, 1, 0, 0, 0],
         [1, 1, 0, 0, 1, 0, 0, 1],
         [0, 1, 0, 0, 1, 0, 0, 0],
         [0, 1, 0, 0, 1, 0, 0, 1],
         [1, 1, 1, 0, 1, 0, 0, 0],
         [1, 0, 1, 0, 1, 0, 0, 1],
         [0, 0, 1, 0, 1, 0, 0, 0],
         [0, 0, 1, 0, 1, 0, 0, 1],
         [1, 0, 1, 0, 1, 0, 0, 0],
         [1, 1, 1, 0, 1, 0, 0, 1],
         [0, 1, 1, 1, 1, 0, 0, 0],
         [0, 1, 1, 1, 1, 0, 0, 1],
         [1, 1, 0, 1, 1, 0, 0, 0],
         [1, 0, 0, 1, 1, 0, 0, 1],
         [0, 0, 0, 1, 1, 1, 0, 0],
         [0, 0, 0, 1, 1, 1, 0, 1],
         [1, 0, 0, 1, 1, 1, 0, 0],
         [1, 1, 0, 1, 1, 1, 0, 1],
         [0, 1, 0, 1, 1, 1, 0, 0],
         [0, 1, 0, 1, 1, 1, 0, 1],
         [1, 1, 1, 1, 1, 1, 0, 0],
         [1, 0, 1, 1, 1, 1, 0, 1],
         [0, 0, 1, 1, 0, 1, 0, 0],
         [0, 0, 1, 1, 0, 1, 0, 1],
         [1, 0, 1, 1, 0, 1, 0, 0],
         [1, 1, 1, 1, 0, 1, 0, 1],
         [0, 1, 1, 0, 0, 1, 0, 0],
         [0, 1, 1, 0, 0, 1, 0, 1],
         [1, 1, 0, 0, 0, 1, 0, 0],
         [1, 0, 0, 0, 0, 1, 0, 1],
         [0, 0, 0, 0, 0, 1, 0, 0],
         [0, 0, 0, 0, 0, 1, 0, 1],
         [1, 0, 0, 0, 0, 1, 0, 0],
         [1, 1, 0, 0, 0, 1, 0, 1],
         [0, 1, 0, 0, 0, 1, 0, 0],
         [0, 1, 0, 0, 0, 1, 0, 1],
         [1, 1, 1, 0, 0, 1, 0, 0],
         [1, 0, 1, 0, 0, 1, 0, 1],
         [0, 0, 1, 0, 0, 1, 0, 0],
         [0, 0, 1, 0, 0, 1, 0, 1],
         [1, 0, 1, 0, 0, 1, 0, 0],
         [1, 1, 1, 0, 0, 1, 0, 1],
         [0, 1, 1, 1, 0, 1, 0, 0],
         [0, 1, 1, 1, 0, 1, 0, 1],
         [1, 1, 0, 1, 0, 1, 0, 0],
         [1, 0, 0, 1, 0, 1, 0, 1],
         [0, 0, 0, 1, 0, 1, 0, 0],
         [0, 0, 0, 1, 0, 1, 0, 1],
         [1, 0, 0, 1, 0, 1, 0, 0],
         [1, 1, 0, 1, 0, 1, 0, 1],
         [0, 1, 0, 1, 0, 1, 0, 0],
         [0, 1, 0, 1, 0, 1, 0, 1],
         [1, 1, 1, 1, 0, 1, 0, 0],
         [1, 0, 1, 1, 0, 1, 0, 1],
         [0, 0, 1, 1, 1, 1, 0, 0],
         [0, 0, 1, 1, 1, 1, 0, 1],
         [1, 0, 1, 1, 1, 1, 0, 0],
         [1, 1, 1, 1, 1, 1, 0, 1],
         [0, 1, 1, 0, 1, 1, 0, 0],
         [0, 1, 1, 0, 1, 1, 0, 1],
         [1, 1, 0, 0, 1, 1, 0, 0],
         [1, 0, 0, 0, 1, 1, 0, 1],
         [0, 0, 0, 0, 1, 1, 1, 0],
         [0, 0, 0, 0, 1, 1, 1, 1],
         [1, 0, 0, 0, 1, 1, 1, 0],
         [1, 1, 0, 0, 1, 1, 1, 1],
         [0, 1, 0, 0, 1, 1, 1, 0],
         [0, 1, 0, 0, 1, 1, 1, 1],
         [1, 1, 1, 0, 1, 1, 1, 0],
         [1, 0, 1, 0, 1, 1, 1, 1],
         [0, 0, 1, 0, 1, 1, 1, 0],
         [0, 0, 1, 0, 1, 1, 1, 1],
         [1, 0, 1, 0, 1, 1, 1, 0],
         [1, 1, 1, 0, 1, 1, 1, 1],
         [0, 1, 1, 1, 1, 1, 1, 0],
         [0, 1, 1, 1, 1, 1, 1, 1],
         [1, 1, 0, 1, 1, 1, 1, 0],
         [1, 0, 0, 1, 1, 1, 1, 1],
         [0, 0, 0, 1, 1, 0, 1, 0],
         [0, 0, 0, 1, 1, 0, 1, 1],
         [1, 0, 0, 1, 1, 0, 1, 0],
         [1, 1, 0, 1, 1, 0, 1, 1],
         [0, 1, 0, 1, 1, 0, 1, 0],
         [0, 1, 0, 1, 1, 0, 1, 1],
         [1, 1, 1, 1, 1, 0, 1, 0],
         [1, 0, 1, 1, 1, 0, 1, 1],
         [0, 0, 1, 1, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0, 1, 1],
         [1, 0, 1, 1, 0, 0, 1, 0],
         [1, 1, 1, 1, 0, 0, 1, 1],
         [0, 1, 1, 0, 0, 0, 1, 0],
         [0, 1, 1, 0, 0, 0, 1, 1],
         [1, 1, 0, 0, 0, 0, 1, 0],
         [1, 0, 0, 0, 0, 0, 1, 1],
         [0, 0, 0, 0, 0, 0, 1, 0],
         [1, 0, 0, 0, 0, 0, 1, 1],
         [1, 0, 0, 0, 0, 0, 1, 0],
         [0, 1, 0, 0, 0, 0, 1, 1],
         [0, 1, 0, 0, 0, 0, 1, 0],
         [1, 1, 0, 0, 0, 0, 1, 1],
         [1, 1, 1, 0, 0, 0, 1, 0],
         [0, 0, 1, 0, 0, 0, 1, 1],
         [0, 0, 1, 0, 0, 0, 1, 0],
         [1, 0, 1, 0, 0, 0, 1, 1],
         [1, 0, 1, 0, 0, 0, 1, 0],
         [0, 1, 1, 0, 0, 0, 1, 1],
         [0, 1, 1, 1, 0, 0, 1, 0],
         [1, 1, 1, 1, 0, 0, 1, 1],
         [1, 1, 0, 1, 0, 0, 1, 0],
         [0, 0, 0, 1, 0, 0, 1, 1],
         [0, 0, 0, 1, 0, 0, 1, 0],
         [1, 0, 0, 1, 0, 0, 1, 1],
         [1, 0, 0, 1, 0, 0, 1, 0],
         [0, 1, 0, 1, 0, 0, 1, 1],
         [0, 1, 0, 1, 0, 0, 1, 0],
         [1, 1, 0, 1, 0, 0, 1, 1],
         [1, 1, 1, 1, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0, 1, 1],
         [0, 0, 1, 1, 1, 0, 1, 0],
         [1, 0, 1, 1, 1, 0, 1, 1],
         [1, 0, 1, 1, 1, 0, 1, 0],
         [0, 1, 1, 1, 1, 0, 1, 1],
         [0, 1, 1, 0, 1, 0, 1, 0],
         [1, 1, 1, 0, 1, 0, 1, 1],
         [1, 1, 0, 0, 1, 0, 1, 0],
         [0, 0, 0, 0, 1, 0, 1, 1],
         [0, 0, 0, 0, 1, 0, 1, 0],
         [1, 0, 0, 0, 1, 0, 1, 1],
         [1, 0, 0, 0, 1, 0, 1, 0],
         [0, 1, 0, 0, 1, 0, 1, 1],
         [0, 1, 0, 0, 1, 0, 1, 0],
         [1, 1, 0, 0, 1, 0, 1, 1],
         [1, 1, 1, 0, 1, 0, 1, 0],
         [0, 0, 1, 0, 1, 0, 1, 1],
         [0, 0, 1, 0, 1, 0, 1, 0],
         [1, 0, 1, 0, 1, 0, 1, 1],
         [1, 0, 1, 0, 1, 0, 1, 0],
         [0, 1, 1, 0, 1, 0, 1, 1],
         [0, 1, 1, 1, 1, 0, 1, 0],
         [1, 1, 1, 1, 1, 0, 1, 1],
         [1, 1, 0, 1, 1, 0, 1, 0],
         [0, 0, 0, 1, 1, 0, 1, 1],
         [0, 0, 0, 1, 1, 1, 1, 0],
         [1, 0, 0, 1, 1, 1, 1, 1],
         [1, 0, 0, 1, 1, 1, 1, 0],
         [0, 1, 0, 1, 1, 1, 1, 1],
         [0, 1, 0, 1, 1, 1, 1, 0],
         [1, 1, 0, 1, 1, 1, 1, 1],
         [1, 1, 1, 1, 1, 1, 1, 0],
         [0, 0, 1, 1, 1, 1, 1, 1],
         [0, 0, 1, 1, 0, 1, 1, 0],
         [1, 0, 1, 1, 0, 1, 1, 1],
         [1, 0, 1, 1, 0, 1, 1, 0],
         [0, 1, 1, 1, 0, 1, 1, 1],
         [0, 1, 1, 0, 0, 1, 1, 0],
         [1, 1, 1, 0, 0, 1, 1, 1],
         [1, 1, 0, 0, 0, 1, 1, 0],
         [0, 0, 0, 0, 0, 1, 1, 1],
         [0, 0, 0, 0, 0, 1, 1, 1],
         [1, 0, 0, 0, 0, 1, 1, 0],
         [1, 0, 0, 0, 0, 1, 1, 1],
         [0, 1, 0, 0, 0, 1, 1, 0],
         [0, 1, 0, 0, 0, 1, 1, 1],
         [1, 1, 0, 0, 0, 1, 1, 0],
         [1, 1, 1, 0, 0, 1, 1, 1],
         [0, 0, 1, 0, 0, 1, 1, 0],
         [0, 0, 1, 0, 0, 1, 1, 1],
         [1, 0, 1, 0, 0, 1, 1, 0],
         [1, 0, 1, 0, 0, 1, 1, 1],
         [0, 1, 1, 0, 0, 1, 1, 0],
         [0, 1, 1, 1, 0, 1, 1, 1],
         [1, 1, 1, 1, 0, 1, 1, 0],
         [1, 1, 0, 1, 0, 1, 1, 1],
         [0, 0, 0, 1, 0, 1, 1, 0],
         [0, 0, 0, 1, 0, 1, 1, 1],
         [1, 0, 0, 1, 0, 1, 1, 0],
         [1, 0, 0, 1, 0, 1, 1, 1],
         [0, 1, 0, 1, 0, 1, 1, 0],
         [0, 1, 0, 1, 0, 1, 1, 1],
         [1, 1, 0, 1, 0, 1, 1, 0],
         [1, 1, 1, 1, 0, 1, 1, 1],
         [0, 0, 1, 1, 0, 1, 1, 0],
         [0, 0, 1, 1, 1, 1, 1, 1],
         [1, 0, 1, 1, 1, 1, 1, 0],
         [1, 0, 1, 1, 1, 1, 1, 1],
         [0, 1, 1, 1, 1, 1, 1, 0],
         [0, 1, 1, 0, 1, 1, 1, 1],
         [1, 1, 1, 0, 1, 1, 1, 0],
         [1, 1, 0, 0, 1, 1, 1, 1],
         [0, 0, 0, 0, 1, 1, 1, 0],
         [0, 0, 0, 0, 1, 1, 0, 1],
         [1, 0, 0, 0, 1, 1, 0, 0],
         [1, 0, 0, 0, 1, 1, 0, 1],
         [0, 1, 0, 0, 1, 1, 0, 0],
         [0, 1, 0, 0, 1, 1, 0, 1],
         [1, 1, 0, 0, 1, 1, 0, 0],
         [1, 1, 1, 0, 1, 1, 0, 1],
         [0, 0, 1, 0, 1, 1, 0, 0],
         [0, 0, 1, 0, 1, 1, 0, 1],
         [1, 0, 1, 0, 1, 1, 0, 0],
         [1, 0, 1, 0, 1, 1, 0, 1],
         [0, 1, 1, 0, 1, 1, 0, 0],
         [0, 1, 1, 1, 1, 1, 0, 1],
         [1, 1, 1, 1, 1, 1, 0, 0],
         [1, 1, 0, 1, 1, 1, 0, 1],
         [0, 0, 0, 1, 1, 1, 0, 0],
         [0, 0, 0, 1, 1, 0, 0, 1],
         [1, 0, 0, 1, 1, 0, 0, 0],
         [1, 0, 0, 1, 1, 0, 0, 1],
         [0, 1, 0, 1, 1, 0, 0, 0],
         [0, 1, 0, 1, 1, 0, 0, 1],
         [1, 1, 0, 1, 1, 0, 0, 0],
         [1, 1, 1, 1, 1, 0, 0, 1],
         [0, 0, 1, 1, 1, 0, 0, 0],
         [0, 0, 1, 1, 0, 0, 0, 1],
         [1, 0, 1, 1, 0, 0, 0, 0],
         [1, 0, 1, 1, 0, 0, 0, 1],
         [0, 1, 1, 1, 0, 0, 0, 0],
         [0, 1, 1, 0, 0, 0, 0, 1],
         [1, 1, 1, 0, 0, 0, 0, 0],
         [1, 1, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0, 0]]
    )
    cm = np.array(
        [[1, 1, 0, 0, 0, 0, 0, 1],
         [1, 1, 1, 0, 0, 0, 0, 0],
         [0, 1, 1, 1, 0, 0, 0, 0],
         [0, 0, 1, 1, 1, 0, 0, 0],
         [0, 0, 0, 1, 1, 1, 0, 0],
         [0, 0, 0, 0, 1, 1, 1, 0],
         [0, 0, 0, 0, 0, 1, 1, 1],
         [1, 0, 0, 0, 0, 0, 1, 1]]
    )
    cm = cm if use_connectivity_matrices else None

    current_state = tuple([0] * 8)
    past_state = tuple([0] * 8)

    return Network(tpm, current_state, past_state, connectivity_matrix=cm)


def eights():
    net = eight_node()
    return Subsystem(range(net.size), net)


def eight_node_sbs():
    tpm = [[1] + ([0] * 255)] * 256
    cm = np.array(
        [[1, 1, 0, 0, 0, 0, 0, 1],
         [1, 1, 1, 0, 0, 0, 0, 0],
         [0, 1, 1, 1, 0, 0, 0, 0],
         [0, 0, 1, 1, 1, 0, 0, 0],
         [0, 0, 0, 1, 1, 1, 0, 0],
         [0, 0, 0, 0, 1, 1, 1, 0],
         [0, 0, 0, 0, 0, 1, 1, 1],
         [1, 0, 0, 0, 0, 0, 1, 1]]
    )
    cm = cm if use_connectivity_matrices else None

    current_state = tuple([0] * 8)
    past_state = tuple([0] * 8)

    return Network(tpm, current_state, past_state, connectivity_matrix=cm)
